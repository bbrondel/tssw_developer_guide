.. _pre-commit:

##########
pre-commit
##########

``pre-commit`` is a tool to automatically run software tools, referred to as ``hooks``, when committing code to a versioning control repository like ``git``.
See `the pre-commit website <https://pre-commit.com/>`_.

To enable this:

* Install pre-commit, for instance ``conda install -y pre-commit``.

The following pre-commit hooks are used:

:black: An opinionated autoformatter.
:isort: An opinionated import sorter.
:flake8: A style checker with many different plugins to enforce different rules.
:check-yaml: Checks yaml files for proper format.
:check-xml: Checks xml files for proper format.
:mypy: Performs type checking on the code (optional).


##################
ts_pre_commit_conf
##################

``ts_pre_commit_conf`` is a tool to generate configuration files for the ``pre-commit`` hooks for the Telescope and Site SoftWare (TSSW) team at the Vera C. Rubin Observatory.

These configuration files facilitate ``pre-commit`` to maintain ``black`` formatting, ``flake8`` compliance and ``isort`` imports sorting.
If ``mypy`` is used, a configuration file can be generated for that as well.
The configuration files are generated by using the ``generate_pre_commit_conf`` command.
Since TSSW uses ``conda`` (or ``mamba``) for their software installations, a conda recipe was created for this project and the conda package was made available in the ``lsstts`` conda channel.

In order for the ``generate_pre_commit_conf`` command to know which ``pre-commit`` hooks need to be applied, a ``.ts-pre-commit-config.yaml`` configuration file needs to be created.
This ``.ts-pre-commit-config.yaml`` file contains information that indicates for every ``pre-commit`` whether it should be applied or not.
The ``.ts-pre-commit-config.yaml`` configuration file can be generated using the ``generate_pre_commit_conf --create`` command, or manually.
For more information on the command line options, use ``generate_pre_commit_conf --help``.
An example where all ``pre-commit`` hooks are enabled is:

.. code-block:: yaml

   check-yaml: true
   check-xml: true
   black: true
   flake8: true
   isort: true
   mypy: true

To enable this in a new project or a project that isn't configured for pre-commit yet, follow the instructions for installing pre-commit in the previous section.
In case of a project that already has a ``.pre-commit-config.yaml`` configuration file, execute these steps:

* Inspect the ``.pre-commit-config.yaml`` file to see if the project uses mypy or not.
* Remove the ``.pre-commit-config.yaml`` file with ``git rm --cached .pre-commit-config.yaml``.

Then, in all cases, execute these steps:

* Install ``ts_pre_commit_conf`` if not already done, for instance ``conda install -y -c lsstts ts-pre-commit-config``.
* Then execute ``generate_pre_commit_conf --create`` if mypy is used, or ``generate_pre_commit_conf --create --no-mypy`` if not.
* Add the newly created ``.ts_pre_commit_config.yaml`` to git with ``git add .ts_pre_commit_config.yaml``.
* Committing the changes at this stage may lead to errors from the pre-commit hooks, so first run pre-commit on the command line with ``pre-commit run --all-files``.
  If this changes anything, then fix as needed.
  Changes made by black can be accepted "as is".
  Changes made by isort are usually innocuous, but it is configured to sort includes in ``__init__.py`` files, so there is potential for breakage.
  If mypy complains, update your code.
* Once this is all done, create a git commit to reflect the change with ``git commit -a -m "Use ts_pre_commit_conf"``.

The ``generate_pre_commit_conf`` command fails with a comprehensive error message if a mandatory or optional ``pre-commit`` hook is missing.
All ``pre-commit`` hooks except for ``mypy`` are mandatory for TSSW projects, so those hooks need to be set to ``true``.
Setting one or more of the mandatory hooks to ``false`` will make the ``generate_pre_commit_conf`` command fail with a comprehensive error message.

The configuration files will be updated whenever the pre-commit hooks get updated.
Apart from that, all generated configuration file names get added to ``.gitignore`` as well.
The TSSW Jenkins CI jobs update these configuration files and execute pre-commit every time the jobs run, so you know that you need to update them locally and fix your code if a job fails.
You can update the config file locally by running the ``generate_pre_commit_conf`` command again.
