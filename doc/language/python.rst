######
Python
######

.. note::
    This guide is under development and is likely to change.

.. contents::
    :local:

Style
=====

We use PEP-8 except for the following exceptions outlined in the ``setup.cfg`` found below.

PEP-8
-----

`PEP-8 <https://www.python.org/dev/peps/pep-0008/>`_

* `flake8 <https://flake8.pycqa.org/en/latest/>`_
* `black v19.10b <https://black.readthedocs.io/en/stable/>`_

This is the current ``setup.cfg`` file

.. code-block:: python
   :caption: setup.cfg

   [aliases]
   test=pytest

   [flake8]
   max-line-length = 110
   max-doc-length = 79
   ignore = E133, E203, E226, E228, N802, N803, N806, N812, N813, N815, N816, W503
   exclude =
   doc,
   __init__.py,
   tests/.tests

   [tool:pytest]
   addopts = --flake8
   flake8-ignore = E133 E203 E226 E228 N802 N803 N806 N812 N813 N815 N816 W503

   [metadata]
   version = attr: setuptools_scm.get_version

For setting up ``black`` use the following pre-commit hook.
Touch ``.githooks/pre-commit``

.. code-block:: bash
   :caption: pre-commit

   #!/bin/sh
   git stash -q --keep-index
   black . --check
   RESULT=$?
   if [ $RESULT != 0 ]; then
      echo "Commit rejected. Reformat your code with \"black .\""
   fi
   git stash pop -q
   exit $RESULT

.. prompt:: bash

   chmod +x .githooks/pre-commit # only run once and then will be saved as executable by git.


Docstring
=========

* `Numpydoc <https://numpydoc.readthedocs.io>`_

Version Handling
================
We use `semver v.2.0.0 <https://semver.org/spec/v2.0.0.html>`_ with following format ``MAJOR.MINOR.PATCH[-rc.numeric]``.

Tools
   -  `setuptools-scm <https://pypi.org/project/setuptools-scm>`_
        An extension for setuptools that sets version based on git's commit and tag metadata.

Development Packaging
=====================

* `Setuptools <setuptools.readthedocs.io>`_
* `EUPs <https://github.com/RobertLuptonTheGood/eups>`_

.. code-block:: python
   :caption: setup.py

   import setuptools
   import pathlib
   import os
   import sys

   setup_reqs = ["setuptools_scm"]
   install_reqs = []
   test_reqs = [
      "pytest",
      "pytest-flake8",
      "pytest-coverage",
      "asynctest",
      "black == 19.10b0",
   ]
   dev_requires = install_reqs + test_reqs + ["documenteer[pipelines]"]
   scm_version_template = """# Generated by setuptools_scm
   __all__ = ["__version__"]
   __version__ = "{version}"
   """
   tools_path = pathlib.PurePath(setuptools.__path__[0])
   base_prefix = pathlib.PurePath(sys.base_prefix)
   data_files_path = tools_path.relative_to(base_prefix).parents[1]

   setuptools.setup(
      name="ts-{csc-name}",
      use_scm_version={
         "write_to": "python/lsst/ts/{csc-name}/version.py",
         "write_to_template": scm_version_template,
      },
      setup_requires=setup_reqs,
      install_requires=install_reqs,
      extras_require={"dev": setup_reqs + install_reqs + test_reqs + dev_requires},
      packages=setuptools.find_namespace_packages(where="python"),
      package_dir={"": "python"},
      package_data={"": ["*.rst", "*.yaml"]},
      data_files=[(os.path.join(data_files_path, "schema"), ["schema/CBP.yaml"])],
      scripts=["bin/run_cbp.py", "bin/run_cbp_simulator.sh"],
      tests_require=test_reqs,
      license="GPL",
      project_urls={
         "Bug Tracker": "https://jira.lsstcorp.org/secure/Dashboard.jspa",
         "Source Code": "https://github.com/lsst-ts/ts_{csc_name}",
      },
   )

Unit Testing
============

* `pytest <https://pytest.org>`_

Documentation
=============

* `documenteer <https://documenteer.lsst.io>`_

:doc:`/documentation-guide`

Continuous Integration with Jenkins
===================================

:doc:`/development/jenkinsfile`

